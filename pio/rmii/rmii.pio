//NOTE The clock is sourced by the MAC for RMII so there isn't any
//     need for an async clock. However, the PHY breakout board
//     already has an oscillator and I want to try making it work
//     without any modifications to the board. Furthermore, other
//     variants of MII need an async clock for RX anyway.
//
//     We are running the PIOs (and the processor) at 250 MHz to
//     have enough oversampling to synchronize to the external
//     clock.
//
//     That being said, we could disable the oscillator on the PHY
//     board and generate the clock with side sets. That way, we can
//     probably run the PIOs at 100 MHz. This will only work for RMII
//     and the MCU must be clocked by a crystal that is precise enough.
//FIXME implement that, as well ^^
//FIXME pins 20 and 22 can be used as clock inputs -> another way of doing this?

.define public CLK 9
.define public CRS 8
.define public RX1 7
.define public RX0 6

.program rmii_rx
.wrap_target
    wait 0 gpio CRS
    wait 1 gpio CRS

repeat:
    // RMII spec says we should sample near the rising edge (setup 4 ns, hold 2ns)
    // but logic_analyzer program shows that falling edge may be better
    wait 1 gpio CLK
    wait 0 gpio CLK
    in pins, 4
    jmp pin repeat

    //in null, 4
    //push

    // We cannot simply push the data because it isn't aligned like the other data and
    // I don't think there is any way to access the shift count - neither in the PIO
    // nor the MCU.
    //FIXME there *must* be a better way...
    in null, 4
    in null, 4
    in null, 4
    in null, 4
    in null, 4
    in null, 4
    in null, 4
    // We have pushed all data but input shift count is not reset to 0 -> saturate plus auto-push to reset it
    in null, 32

    irq wait 0
.wrap

//FIXME for rx, try this:
// - omit CRS and CLK in ISR
// - do the "in null, 4" in software and look at FIFO status to find out which of them saturates the counter
// - that way, we know how many bits we have sampled.
// - This may be off-by-one because RX is sampled by `in` and CRS is sampled by `jmp`.
//   Let's assume that the PHY is always giving us whole nibbles.
// - This is not true in case of RX_ERRs. We have to rely on the CRC to detect errors.

//FIXME use relative pin numbers - only RX0/1 and TX0/1 pairs need to be next to each other

// TX0/1 connect to outputs
// CLK via GPIO
// TX_EN via side-set

.program rmii_tx
.side_set 1 opt  //FIXME we could make this not optional
start:
    pull block  // no-op if full because of auto-pull
    mov y, osr
    out null, 32  // get next word

.wrap_target
    // Timing is a bit tricky: We may change the data at any point except near the
    // rising edge. However, there is some delay involved before we see the edge and
    // react to it.
    //FIXME compare error rates for different offsets
    //wait 0 pin 0
    wait 1 gpio CLK
    jmp y-- notdone
    jmp done  //FIXME inline this
notdone:
    //wait 1 pin 0
    wait 0 gpio CLK
    out pins, 2 side 1
.wrap
done:
    //wait 1 pin 0
    wait 0 gpio CLK
    set pins, 0 side 0
    irq wait 1
    jmp start

% c-sdk {
void rmii_rx_program_init(PIO pio, uint sm, uint offset) {
   pio_gpio_init(pio, RX0);
   pio_gpio_init(pio, RX1);
   pio_gpio_init(pio, CRS);
   pio_gpio_init(pio, CLK);
   pio_sm_set_consecutive_pindirs(pio, sm, RX0, 4, false);
   pio_sm_config c = rmii_rx_program_get_default_config(offset);
   sm_config_set_in_pins(&c, RX0);
   sm_config_set_in_shift(&c, true, true, 32);
   sm_config_set_jmp_pin(&c, CRS);
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_clkdiv_int_frac(pio, sm, 1, 0);
}

void rmii_tx_program_init(PIO pio, uint sm, uint offset, uint clk, uint tx_en, uint tx0) {
  uint tx1 = tx0+1;
  pio_gpio_init(pio, clk);
  pio_gpio_init(pio, tx_en);
  pio_gpio_init(pio, tx0);
  pio_gpio_init(pio, tx1);
  pio_sm_set_pins_with_mask(pio, sm, 0, (1<<tx_en) | (1<<tx0) | (1<<tx1));
  pio_sm_set_consecutive_pindirs(pio, sm, clk, 1, false);
  pio_sm_set_consecutive_pindirs(pio, sm, tx_en, 1, true);
  pio_sm_set_consecutive_pindirs(pio, sm, tx0, 2, true);

  pio_sm_config c = rmii_tx_program_get_default_config(offset);
  sm_config_set_in_pins(&c, clk);
  sm_config_set_out_pins(&c, tx0, 2);
  sm_config_set_out_shift(&c, true, true, 32);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
  //sm_config_set_sideset(&c, 1, true, false);  //FIXME This seems to break stuff but should be the same as decls above.
  sm_config_set_sideset_pins(&c, tx_en);
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_clkdiv_int_frac(pio, sm, 1, 0);
}
%}
